<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphics on CYFan Blog</title>
    <link>https://fjordyo0707.github.io/graphics/</link>
    <description>Recent content in Graphics on CYFan Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Sep 2023 14:40:29 -0700</lastBuildDate><atom:link href="https://fjordyo0707.github.io/graphics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vulkan Introduction</title>
      <link>https://fjordyo0707.github.io/graphics/vulkan/vulkan-introduction/</link>
      <pubDate>Fri, 29 Sep 2023 14:40:29 -0700</pubDate>
      
      <guid>https://fjordyo0707.github.io/graphics/vulkan/vulkan-introduction/</guid>
      <description>Vulkan Introduction The content is based on the awesome tutorial website from Alexander Overvoorde
What we need to draw a triangle? Window Vulkan is a platform agnostic API. It can not interface directly with the window system on its own. To establish the connection between Vulkan and the window system to present results to the screen, we need to use the WSI (Window System Integration) extensions. A VkSurfaceKHR object represents an abstract type of surface to present rendered images to.</description>
    </item>
    
    <item>
      <title>DirectX12 Hello Triangle</title>
      <link>https://fjordyo0707.github.io/graphics/directx12/directx12-hello-triangle/</link>
      <pubDate>Thu, 27 Jul 2023 15:39:41 -0700</pubDate>
      
      <guid>https://fjordyo0707.github.io/graphics/directx12/directx12-hello-triangle/</guid>
      <description>DirectX12 Hello Triangle The online resources for starting DirectX12 to beccoming a intermediate level has a pretty steep learning curve. At least for me, it tooks me a while to find the next step after drawing my first triangle. Thus, I would like to start from the github repo Microsoft DirectX-Graphics-Sample.
This code in this post is located at the repo DirectX-Graphics-Samples/tree/master/Samples/Desktop/D3D12HelloWorld/src/HelloTriangle. Feel free to build and test it by yourself.</description>
    </item>
    
    <item>
      <title>DirectX12 Intoduction</title>
      <link>https://fjordyo0707.github.io/graphics/directx12/directx12-intoduction/</link>
      <pubDate>Mon, 24 Jul 2023 18:09:39 -0700</pubDate>
      
      <guid>https://fjordyo0707.github.io/graphics/directx12/directx12-intoduction/</guid>
      <description>DirectX12 Why learning DirectX12? Comparing to OpenGL, DirectX 12 is a newer graphic API and gives graphic programmers more options to twist the performance in GPU hardware. But the tradeoff occurs it becoming a verbose API. Developers gonna take more reponsible when dealing with this API.
As a people mostly dealing with OpenGL, the learning curve of DirectX 12 is higher than people dealing with other modern API, like Vulkan, Apple Metal.</description>
    </item>
    
    <item>
      <title>My Pbrt Engine</title>
      <link>https://fjordyo0707.github.io/graphics/pbr/my-pbrt-engine/</link>
      <pubDate>Sat, 29 Oct 2022 01:32:40 -0400</pubDate>
      
      <guid>https://fjordyo0707.github.io/graphics/pbr/my-pbrt-engine/</guid>
      <description>My own pbrt engine As a hibbist of raytracing, I would like to start my own Physically based Rendering Here are the few resources I am going to start with:
pbrt book 3th edition Mitsuba Further Reading Raytracing System Kirk, D., and J.Arvo. 1988. The ray tracing kernel. In Proceedings of Ausgraph &amp;lsquo;88, 75-82 </description>
    </item>
    
  </channel>
</rss>
