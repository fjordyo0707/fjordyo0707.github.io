<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on CYFan Blog</title>
    <link>https://fjordyo0707.github.io/categories/programming/</link>
    <description>Recent content in Programming on CYFan Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 May 2023 15:04:25 -0700</lastBuildDate><atom:link href="https://fjordyo0707.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modern C&#43;&#43;: Move Semantics</title>
      <link>https://fjordyo0707.github.io/programming/c&#43;&#43;/modern-cpp-move-semantics/</link>
      <pubDate>Fri, 05 May 2023 15:04:25 -0700</pubDate>
      
      <guid>https://fjordyo0707.github.io/programming/c&#43;&#43;/modern-cpp-move-semantics/</guid>
      <description>Why we want to add Move Semantics? Copy Semantics (with C++98/C++03) Mostly the compiler will know that it is a temporary object even though you use it inline.
Copystd::vector&amp;lt;std::string&amp;gt; vec; vec.reserve(3); std::string s(getData()); vec.push_back(s); // temporary object will be created and destory vec.push_back(getData());Object with Name We keep read the string to read_str and put it in read_vec.
Copystd::string read_str; std::vector&amp;lt;std::string&amp;gt; read_vec; while(std::getline(my_stream, read_str)) { // read a line to read_str read_vec.</description>
    </item>
    
    <item>
      <title>Modern C&#43;&#43;: Lambdas</title>
      <link>https://fjordyo0707.github.io/programming/c&#43;&#43;/modern-cpp-lambdas/</link>
      <pubDate>Fri, 05 May 2023 15:04:11 -0700</pubDate>
      
      <guid>https://fjordyo0707.github.io/programming/c&#43;&#43;/modern-cpp-lambdas/</guid>
      <description>STL Data stuctures as ranges Algorithm Ilterators as glue interface Callables Before Modern C++: Copyclass Person { public: std::string getName() const; std::string getId() const; }Copybool lessName(const Person&amp;amp; p1, const Person&amp;amp; p2) { return p1.getName() &amp;lt; p2.getName(); } bool lessId(const Person&amp;amp; p1, const Person&amp;amp; p2) { return p1.getId() &amp;lt; p2.getId(); } std::vector&amp;lt;Person&amp;gt; coll; std::sort(coll.begin(), coll.end(), lessName); std::sort(coll.begin(), coll.end(), lessId);The problem is that we have to define functions, and functions have several drawback.</description>
    </item>
    
    <item>
      <title>Modern C&#43;&#43;: Smart Pointers</title>
      <link>https://fjordyo0707.github.io/programming/c&#43;&#43;/modern-cpp-smart-pointers/</link>
      <pubDate>Fri, 05 May 2023 15:03:58 -0700</pubDate>
      
      <guid>https://fjordyo0707.github.io/programming/c&#43;&#43;/modern-cpp-smart-pointers/</guid>
      <description>Polymorphism and heap memory Polymorphism with Inheritance Before learning smart pointer, we need some review for polymorphism and heap memory. The most important feature of Polymorphism is heterogenous collection
Copyclass GeoObj { public: GeoObj() = default; virtual void draw() const = 0; virtual ~GeoObj() = default; ... }; class Circle : public GeoObj { private: Coord center; int rad; public: Circle(Coord c, int r); virtual void draw() const override; .</description>
    </item>
    
  </channel>
</rss>
